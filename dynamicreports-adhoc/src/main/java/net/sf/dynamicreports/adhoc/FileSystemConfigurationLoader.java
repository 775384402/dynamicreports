package net.sf.dynamicreports.adhoc;

import net.sf.dynamicreports.adhoc.configuration.AdhocConfiguration;
import net.sf.dynamicreports.adhoc.transformation.IAdhocToXmlTransform;
import net.sf.dynamicreports.adhoc.transformation.IXmlToAdhocTransform;
import net.sf.dynamicreports.report.exception.DRException;

import java.io.InputStream;
import java.io.OutputStream;

/**
 * This is a simple instance of a configuration-loader that should be able to load and save
 * adhoc-configuration to and from the file system, in the form of JAXB generate xml
 */
public class FileSystemConfigurationLoader implements ConfigurationLoader {

    private final OutputStream os;
    private final InputStream is;
    private final XmlConfigurationLoader xmlConfigurationLoader;

    public FileSystemConfigurationLoader(OutputStream os, InputStream is, XmlConfigurationLoader xmlConfigurationLoader) {
        this.os = os;
        this.is = is;
        this.xmlConfigurationLoader = xmlConfigurationLoader;
    }

    public FileSystemConfigurationLoader(OutputStream os, InputStream is,IAdhocToXmlTransform adhocToXmlTransform, IXmlToAdhocTransform xmlToAdhocTransform) {
        this.os = os;
        this.is = is;
        this.xmlConfigurationLoader = AdhocManager.getInstance(adhocToXmlTransform, xmlToAdhocTransform);
    }

    /**
     * <p>saveConfiguration.</p>
     * This method enables a client to save configuration to an XML file. Consider the folowing example
     * <pre>
     *     AdhocReport report = new AdhocReport();
     *     AdhocColumn column = new AdhocColumn();
     *     column.setName("item");
     *      report.addColumn(column);
     *
     *      column = new AdhocColumn();
     *      column.setName("quantity");
     *      report.addColumn(column);
     *  AdhocConfiguration configuration = new AdhocConfiguration();
     *  configuration.setReport(report);
     *
     *  // Now saving to an XML file in the system
     *  AdhocManager.saveConfiguration(configuration, new FileOutputStream("c:/temp/configuration.xml"));
     * </pre>
     *
     * @param adhocConfiguration a {@link AdhocConfiguration} object.
     * @throws DRException if any.
     */
    @Override
    public void saveConfiguration(AdhocConfiguration adhocConfiguration) throws DRException {

        this.xmlConfigurationLoader.saveConfiguration(adhocConfiguration, os);
    }

    /**
     * <p>loadConfiguration.</p>
     * This method enables a client to read {@link AdhocConfiguration} from an Input source, whether file
     * of web or dynamically generated bytestream method may be applied as shown:
     * <pre>
     *     {@code
     *        AdhocConfiguration loadedConfiguration = AdhocManager.loadConfiguration(new FileInputStream("c:/temp/configuration.xml"));
     *     }
     * </pre>
     *
     * @return a {@link AdhocConfiguration} object.
     * @throws DRException if any.
     */
    @Override
    public AdhocConfiguration loadConfiguration() throws DRException {
        return xmlConfigurationLoader.loadConfiguration(is);
    }
}
